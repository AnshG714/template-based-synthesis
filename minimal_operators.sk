#define LHS {| curr_node | prev_node | next_node |}
#define LOC {| LHS | LHS.next | l.head |}
#define COMP {| LOC != null |}
#define VAL {| LHS.val |}
#define ARITH {| VAL + VAL | VAL + ?? |}

struct Node {
    int val;
    Node next;
}

struct List {
  Node head;
}

List reverseSK(List l) { 
    Node curr_node = null;
    Node prev_node = null;
    Node next_node = null;
    LOC = LOC;
    while (COMP) {
        LOC = LOC;
        LOC = LOC;
        LOC = LOC;
        LOC = LOC;
    }
    LOC = LOC;
    return l;
}

harness void main([int n], int[n] nodes){
  assume n < 4;
  assume n >= 1;
  List l = new List();
  l = populateList(n, l, nodes);
  l = reverseSK(l);
  check(n, l , nodes);
}


List populateList(int n, List l, int[n] nodes) {
  assert n > 0;
  Node curr_node = new Node(val = nodes[0], next = null);
  l.head = curr_node;
  for (int i = 1; i < n; i++) {
      Node new_node = new Node(val = nodes[i], next = null);
      curr_node.next = new_node;
      curr_node = new_node;
  }
  assert length(l) == n;
  return l;
}

int length(List l) {
    int len = 0;
    Node curr_node = l.head;
    while (curr_node != null) {
        len += 1;
        curr_node = curr_node.next;
    }
    return len;
}

void check(int n, List l, int[n] nodes) {
  Node cur = l.head;
  int i = 0;
  assert length(l) == n;
  while (cur != null) {
    assert cur.val == nodes[n - 1 - i];
    cur = cur.next;
    i += 1;
  }
  assert i == n;
}